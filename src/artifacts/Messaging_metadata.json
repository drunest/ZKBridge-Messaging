{
	"compiler": {
		"version": "0.8.16+commit.07a7930e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "CannotSendToSameChain",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SendingDisabled",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "previousAdmin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "AdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "beacon",
						"type": "address"
					}
				],
				"name": "BeaconUpgraded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "Freeze",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "FreezeAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "version",
						"type": "uint8"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "sourceChainId",
						"type": "uint32"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "nonce",
						"type": "uint64"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "msgHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "status",
						"type": "bool"
					}
				],
				"name": "PassMsg",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "Received",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "nonce",
						"type": "uint64"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "msgHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "SendMsg",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "nonce",
						"type": "uint64"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "msgHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "SendZkSyncMsgL1ToL2",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "enabled",
						"type": "bool"
					}
				],
				"name": "SendingEnabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "lightClient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "broadcaster",
						"type": "address"
					}
				],
				"name": "SetLightClientAndBroadcaster",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "SourceChainAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "Unfreeze",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "UnfreezeAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "Upgraded",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "GUARDIAN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MIN_LIGHT_CLIENT_DELAY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "TIMELOCK_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "VERSION",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"name": "broadcasters",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"name": "chainRouter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "isDebug",
						"type": "bool"
					}
				],
				"name": "changeDebugMode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "freeze",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "freezeAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"name": "frozen",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32[]",
						"name": "_sourceChainIds",
						"type": "uint32[]"
					},
					{
						"internalType": "address[]",
						"name": "_lightClients",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "_broadcasters",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "_timelock",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_guardian",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_sendingEnabled",
						"type": "bool"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isDebugMode",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "l1RefundAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "l2RefundAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"name": "lightClients",
				"outputs": [
					{
						"internalType": "contract ILightClientGetter",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "messageStatus",
				"outputs": [
					{
						"internalType": "enum MessageStatus",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"name": "messages",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "msgRelayer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nonce",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proxiableUUID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scrollL1Messager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scrollL2GasLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scrollL2Messager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "targetChainId",
						"type": "uint32"
					},
					{
						"internalType": "address",
						"name": "targetAddr",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "send",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sendingEnabled",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_chainId",
						"type": "uint32"
					},
					{
						"internalType": "address",
						"name": "_routerAddress",
						"type": "address"
					}
				],
				"name": "setChainRouter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					},
					{
						"internalType": "address",
						"name": "lightclient",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "broadcaster",
						"type": "address"
					}
				],
				"name": "setLightClientAndBroadcaster",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_relayer",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_isTrue",
						"type": "bool"
					}
				],
				"name": "setRelayer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_scrollL1Messager",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_scrollL2Messager",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_scrollL2GasLimit",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_l1RefundAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_l2RefundAddress",
						"type": "address"
					}
				],
				"name": "setScroll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "enabled",
						"type": "bool"
					}
				],
				"name": "setSendingEnabled",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_zkSyncAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_l2Value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_gasLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_byteLimit",
						"type": "uint256"
					},
					{
						"internalType": "bytes[]",
						"name": "_factoryDeps",
						"type": "bytes[]"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "setZKSync",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "sourceChainIds",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sourceChainIdsLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "storageRootCache",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "unfreeze",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unfreezeAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					}
				],
				"name": "upgradeTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "upgradeToAndCall",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "slot",
						"type": "uint64"
					},
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					},
					{
						"internalType": "bytes[]",
						"name": "accountProof",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes[]",
						"name": "storageProof",
						"type": "bytes[]"
					}
				],
				"name": "vMsg",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					}
				],
				"name": "vMsgScrollL1ToL2",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "batchIndex",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "proof",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					}
				],
				"name": "vMsgScrollL2ToL1",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					}
				],
				"name": "vMsgZkSyncL1ToL2",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "someSender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "l1BatchNumber",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "proofId",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "trxIndex",
						"type": "uint16"
					},
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					},
					{
						"internalType": "bytes32[]",
						"name": "proof",
						"type": "bytes32[]"
					}
				],
				"name": "vMsgZkSyncL2ToL1",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "zkSyncFactoryDeps",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncL2GasLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncL2GasPerPubdataByteLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncL2Value",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncRefundRecipient",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncToL2Value",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "Succinct Labs",
			"kind": "dev",
			"methods": {
				"constructor": {
					"custom:oz-upgrades-unsafe-allow": "constructor"
				},
				"freeze(uint32)": {
					"details": "This is a safety mechanism to prevent the contract from being used after a security      vulnerability is detected."
				},
				"freezeAll()": {
					"details": "This is a safety mechanism to prevent the contract from being used after a security      vulnerability is detected."
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"proxiableUUID()": {
					"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"setLightClientAndBroadcaster(uint32,address,address)": {
					"details": "This is controlled by the timelock as it is a potentially dangerous method      since both the light client and broadcaster address are critical in verifying      that only valid sent messages are executed."
				},
				"sourceChainIdsLength()": {
					"returns": {
						"_0": "The length of the sourceChainIds array."
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"unfreeze(uint32)": {
					"details": "This is a safety mechanism to continue usage of the contract after a security      vulnerability is patched."
				},
				"unfreezeAll()": {
					"details": "This is a safety mechanism to continue usage of the contract after a security      vulnerability is patched."
				},
				"upgradeTo(address)": {
					"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				},
				"upgradeToAndCall(address,bytes)": {
					"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				}
			},
			"title": "Bridge Router",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Freeze(uint32)": {
					"notice": "Emitted when freeze is called."
				},
				"FreezeAll()": {
					"notice": "Emitted when freezeAll is called."
				},
				"SendingEnabled(bool)": {
					"notice": "Emitted when the sendingEnabled flag is changed."
				},
				"SetLightClientAndBroadcaster(uint32,address,address)": {
					"notice": "Emitted when setLightClientAndBroadcaster is called."
				},
				"SourceChainAdded(uint32)": {
					"notice": "Emitted when a new source chain is added."
				},
				"Unfreeze(uint32)": {
					"notice": "Emitted when unfreeze is called."
				},
				"UnfreezeAll()": {
					"notice": "Emitted when unfreezeAll is called."
				}
			},
			"kind": "user",
			"methods": {
				"GUARDIAN_ROLE()": {
					"notice": "A random constant used to identify addresses with the permission of a 'guardian'."
				},
				"MIN_LIGHT_CLIENT_DELAY()": {
					"notice": "The minimum delay for using any information from the light client."
				},
				"TIMELOCK_ROLE()": {
					"notice": "A random constant used to identify addresses with the permission of a 'timelock'."
				},
				"VERSION()": {
					"notice": "Returns current contract version."
				},
				"broadcasters(uint32)": {
					"notice": "Mapping between source chainId and the address of the Bridge broadcaster on that chain."
				},
				"constructor": {
					"notice": "Prevents the implementation contract from being initialized outside of the upgradeable proxy."
				},
				"freeze(uint32)": {
					"notice": "Freezes messages from the specified chain."
				},
				"freezeAll()": {
					"notice": "Freezes messages from all chains."
				},
				"frozen(uint32)": {
					"notice": "Mapping between a source chainId and whether it's frozen."
				},
				"initialize(uint32[],address[],address[],address,address,bool)": {
					"notice": "Initializes the contract and the parent contracts once."
				},
				"lightClients(uint32)": {
					"notice": "Mapping between source chainId and the corresponding light client."
				},
				"messageStatus(bytes32)": {
					"notice": "Mapping between a message root and its status."
				},
				"messages(uint64)": {
					"notice": "Mapping between a nonce and a message root."
				},
				"nonce()": {
					"notice": "Keeps track of the next nonce to be used."
				},
				"sendingEnabled()": {
					"notice": "Whether sending is enabled or not."
				},
				"setLightClientAndBroadcaster(uint32,address,address)": {
					"notice": "Sets the light client contract and broadcaster for a given chainId."
				},
				"setSendingEnabled(bool)": {
					"notice": "Allows the owner to control whether sending is enabled or not."
				},
				"sourceChainIds(uint256)": {
					"notice": "All sourceChainIds."
				},
				"sourceChainIdsLength()": {
					"notice": "Gets the length of the sourceChainIds array."
				},
				"storageRootCache(bytes32)": {
					"notice": "Storage root cache."
				},
				"unfreeze(uint32)": {
					"notice": "Unfreezes messages from the specified chain."
				},
				"unfreezeAll()": {
					"notice": "Unfreezes messages from all chains."
				},
				"version()": {
					"notice": "Returns current contract version."
				}
			},
			"notice": "Send and receive arbitrary messages from other chains.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/Messaging.sol": "Messaging"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 100
		},
		"remappings": [
			":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
			":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
			":ds-test/=lib/forge-std/lib/ds-test/src/",
			":forge-std/=lib/forge-std/src/",
			":optimism-bedrock-contracts/=lib/optimism-bedrock-contracts/",
			":v2-testnet-contracts/=lib/v2-testnet-contracts/",
			":zkBridge-lightClient/=lib/zkBridge-lightClient/",
			":zkBridge-messaging-interfaces/=lib/zkBridge-messaging-interfaces/"
		],
		"viaIR": true
	},
	"sources": {
		"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol": {
			"keccak256": "0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a",
			"license": "MIT",
			"urls": [
				"bzz-raw://686aaf8725727d94b36c53baad3779e168b31e33eec8d39b41e282382617c626",
				"dweb:/ipfs/QmWVRwPpZyweGCw7uRj1rXQTmcwaXB5Ctz3KvpNJPtxDP8"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol": {
			"keccak256": "0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa",
			"license": "MIT",
			"urls": [
				"bzz-raw://740cf4dc535e3082560cf5a031473029f322690fc8037fe9d5e3a8bef42e757c",
				"dweb:/ipfs/QmTQxFdfxcaueQa23VX34wAPqzruZbkzyeN58tZK2yav2b"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
			"keccak256": "0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888",
			"license": "MIT",
			"urls": [
				"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a",
				"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol": {
			"keccak256": "0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f",
			"license": "MIT",
			"urls": [
				"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053",
				"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
			"keccak256": "0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823",
			"license": "MIT",
			"urls": [
				"bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2",
				"dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol": {
			"keccak256": "0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908",
			"license": "MIT",
			"urls": [
				"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1",
				"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
			"keccak256": "0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271",
			"license": "MIT",
			"urls": [
				"bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618",
				"dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
			"keccak256": "0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778",
			"license": "MIT",
			"urls": [
				"bzz-raw://40e60cbf0e2efede4d9c169e66336a64615af7b719a896ef1f37ae8cd4614ec1",
				"dweb:/ipfs/QmYNiwY22ifhfa8yK6mLCEKfj39caYUHLqe2VBtzDnvdsV"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol": {
			"keccak256": "0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790",
			"license": "MIT",
			"urls": [
				"bzz-raw://622c3eb87563e71585c9f538d1a196fe2d154dcc5b8f335e8770a8acc95e1f3a",
				"dweb:/ipfs/QmSnDqJJLzv3mirjGB1vrk5X7hegFdS7BKpscpxyqj7sWu"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
			"keccak256": "0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183",
			"license": "MIT",
			"urls": [
				"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06",
				"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
			"keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
				"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol": {
			"keccak256": "0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a",
			"license": "MIT",
			"urls": [
				"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3",
				"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol": {
			"keccak256": "0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da",
			"license": "MIT",
			"urls": [
				"bzz-raw://187b5c3a1c9e77678732a2cc5284237f9cfca6bc28ee8bc0a0f4f951d7b3a2f8",
				"dweb:/ipfs/Qmb2KFr7WuQu7btdCiftQG64vTzrG4UyzVmo53EYHcnHYA"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
			"keccak256": "0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a",
			"license": "MIT",
			"urls": [
				"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7",
				"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
			"keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
			"license": "MIT",
			"urls": [
				"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
				"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol": {
			"keccak256": "0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a",
			"license": "MIT",
			"urls": [
				"bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4",
				"dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad",
			"license": "MIT",
			"urls": [
				"bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278",
				"dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH"
			]
		},
		"lib/optimism-bedrock-contracts/Bytes.sol": {
			"keccak256": "0x7aca6593fadf438ee9cd090d8fdc8f94a5202a2eb7f764c9a86f207712d87a48",
			"license": "MIT",
			"urls": [
				"bzz-raw://aac32157885c5a08bd0bc7dcd5511f66db12bb20d0c263dd7be9f58b91538fc1",
				"dweb:/ipfs/Qmb1iG11Z53yt9wNbGsuTvoydJXFosDDpWwRSADKyqiCjw"
			]
		},
		"lib/optimism-bedrock-contracts/rlp/RLPReader.sol": {
			"keccak256": "0x7fec14965f928924f6299a51c4220d2daf1ed46185d1e5706b6bd3d2e0340a56",
			"license": "MIT",
			"urls": [
				"bzz-raw://ae3b6784b641557bc6757c8dea8c8c459343d408f9a18f962763dba341e64e95",
				"dweb:/ipfs/QmbqSmwkzrYbtc4ov9fEfReA4RYUgMBd12dPCm2KGXdRQW"
			]
		},
		"lib/optimism-bedrock-contracts/rlp/RLPWriter.sol": {
			"keccak256": "0x5aa9d21c5b41c9786f23153f819d561ae809a1d55c7b0d423dfeafdfbacedc78",
			"license": "MIT",
			"urls": [
				"bzz-raw://921c44e6a0982b9a4011900fda1bda2c06b7a85894967de98b407a83fe9f90c0",
				"dweb:/ipfs/QmSsHLKDUQ82kpKdqB6VntVGKuPDb4W9VdotsubuqWBzio"
			]
		},
		"lib/optimism-bedrock-contracts/trie/MerkleTrie.sol": {
			"keccak256": "0xd27fc945d6dd2821636d840f3766f817823c8e9fbfdb87c2da7c73e4292d2f7f",
			"license": "MIT",
			"urls": [
				"bzz-raw://497cec37d09ebcdc8d1cccac608a4a0b9b9d83eac6cc7c9e8b73c4c6644e2209",
				"dweb:/ipfs/QmUYMsCcgU6epspvKV9Y6anHyyMb4hd1xVzUZheBY9mfG7"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/common/interfaces/IAllowList.sol": {
			"keccak256": "0x9785d5e0622e545906dc8e18a9f75ee8a79a8546dc2c4cf14b7d55a4746d4643",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc2b0e1dbe49ce76d590c8c78fbcf48679f6f00c0fef6c3fd8098b2a42def7e1",
				"dweb:/ipfs/QmRTm6tR4sRtuRDG5mMdbqc5WX22y3BA8EjiedJt3XNvCT"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/common/libraries/UncheckedMath.sol": {
			"keccak256": "0x221a551950a3990352a073b6026a9ed64f803b9687dae8114780c47dfa47c9e2",
			"license": "MIT",
			"urls": [
				"bzz-raw://9b122e76e968d3eeb97dff4926b57c008584b3ac4cd9983609019a3075760ac0",
				"dweb:/ipfs/QmPwrGcSDkL4DXu8ZEiX3nU4JUiyuPg4PPxfyEKa3MWzcp"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/Plonk4VerifierWithAccessToDNext.sol": {
			"keccak256": "0x69e2d67d73e2bbae2bbacf02f75ca5e87eaadf33ba162ea5765066fb4d7390d8",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd7cfe882108d0271ee01d54cabf136e66ce037af3d5f68b943c8ec59bb240e4",
				"dweb:/ipfs/QmXFFkshred8Y9CHYUQ72vyx5kd88R3HC5gnu13oH8a1gs"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/Storage.sol": {
			"keccak256": "0xe79c36ae36c40e96e07db178b7c291f192694b19d0b01362ef3dbd6ac1c36297",
			"license": "MIT",
			"urls": [
				"bzz-raw://e071374eea83c8ae850a50f50c476fce8347477ccd19cc8e7dbc0518ef99b116",
				"dweb:/ipfs/QmXfXMMQfdK383F4ArWHR53CZZYpFbsm1Q8esbq5TUw112"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/Verifier.sol": {
			"keccak256": "0xc5e03bd445d09725c36c03b1e2a42129c769a5b13c8253dacbf2b18e3c548a40",
			"license": "MIT",
			"urls": [
				"bzz-raw://30962542043a5364587562710977754df952befce22725d54b65eebbf8873b1d",
				"dweb:/ipfs/QmbrScBiydQNgu9SX2tngKFR5CskeV5XHvPP8VHoa1ca5t"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/interfaces/IDiamondCut.sol": {
			"keccak256": "0x5a995753166ae3223c4fc9f829b492242d19282ee3f7941c1be72fc8b24eea33",
			"license": "MIT",
			"urls": [
				"bzz-raw://8f08abc00d65fa882aa958dafc59cd51e317757573e9440be77e46e643f3058f",
				"dweb:/ipfs/QmW4imm7cCDzsKxXZq7AeqPHibbvMM219asrfdtPjVgg1q"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/interfaces/IExecutor.sol": {
			"keccak256": "0x4d7cc066e200a4027b09cab5cba7d44cab252f77bf638d76d4f61da689071b7e",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec46e4410f486383a2498d7d39d92faef476ce28198dc8628240248233a1931d",
				"dweb:/ipfs/Qmdux94mjNAfwcYVTbGhzvLh8DJ4WS7LGeKnn28HzUJkQ5"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/interfaces/IGetters.sol": {
			"keccak256": "0xb84c17876acd4549a9d6898102a638ed69f3fa948df1ae50059be3e0909206ff",
			"license": "MIT",
			"urls": [
				"bzz-raw://be662f18575d3bbb31f00c9e5225c8d83e964c8bea45202886de8d27cdf33d90",
				"dweb:/ipfs/QmaDhSYsZFnDtLjre9mKevXNHgWGTBsv25zG2ud1udNa8L"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/interfaces/IGovernance.sol": {
			"keccak256": "0x410c2ec8c806de63e284c7124469b2e0bb6c10dcba208a5066ac934d9123a0d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://51f85bcc583f13baf068f85b0f40242a740c7e31cbdcc9db89ed6bddc49693c8",
				"dweb:/ipfs/QmW4od4KCjVnHTQH5tgvaTagUiVWNvpLWQJqCe7PndFHpW"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/interfaces/IMailbox.sol": {
			"keccak256": "0xee1a552969b48a1432338aa94fcf17c68f42f62f83442cc02b0093b6ad5b976f",
			"license": "MIT",
			"urls": [
				"bzz-raw://0008ae1a9755493c41bfcb170ad66e3ca9ce3f8f60b8fd5e043be0e50af62a51",
				"dweb:/ipfs/QmTE6aadbBFXfwbkdNn6q4DRhfef8g8v7e1JELRHvXYbuK"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/interfaces/IZkSync.sol": {
			"keccak256": "0x21910d21c8773d75a5bf152eff8c802c95583d513fd364ea96d67fcc45a3f95f",
			"license": "MIT",
			"urls": [
				"bzz-raw://3254c93a9e1dad9d5aef8f8ee0ffacf194422b43662533d4f651eafe3059e7f5",
				"dweb:/ipfs/QmQprjV4DSdoBWL9Ad8MrRsHRZeMfKEd4qX6ZUuYFyShq1"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/libraries/Diamond.sol": {
			"keccak256": "0x8781fa886fd53e336689439be7dc6378cbe4dd1c6cc0d78d583f262435061139",
			"license": "MIT",
			"urls": [
				"bzz-raw://27a47be11afbbfebead5dd21292efd50ca1f360170bda3953ca42dbae5ba19fd",
				"dweb:/ipfs/QmSJne7ity6bzJahYyszaV3a43tX9znjqPyD13UpJp2PdG"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/libraries/PairingsBn254.sol": {
			"keccak256": "0x25c2275d53cf0bc6f730e9b6609e9d3319fed6684fd97a402dff3731f72a2e18",
			"license": "MIT",
			"urls": [
				"bzz-raw://54e7d3003a01cb4bd2fa901f72486edadd037b7b8c59411dbaa7177dee1d9a6d",
				"dweb:/ipfs/QmTzwKVUUGNNmnZW84uqGtoeoChK9Z4mrLhhdu7FDerHf1"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/libraries/PriorityQueue.sol": {
			"keccak256": "0x71df06a2315a36dee83c03b389b985af936de52388ff36bea2cdb3ce7d4e7f40",
			"license": "MIT",
			"urls": [
				"bzz-raw://590e9ed80b711dde55604b95be7ea08d858ebc7a444e7ae3fe619e5560ed81d5",
				"dweb:/ipfs/QmTCKNTQsyrKeZpDP2QN2eEb3SLubecwsM68RtzGbcnEot"
			]
		},
		"lib/v2-testnet-contracts/l1/contracts/zksync/libraries/TranscriptLib.sol": {
			"keccak256": "0x5b11a0deee0cf935d08d84faf56f5cbb053656ce6f7d2294124fb2e5c49eba44",
			"license": "MIT",
			"urls": [
				"bzz-raw://31d48c3c72d0689f73b6527808113f2b6ea78ab6984a7c778eb0ce16ecdb38ba",
				"dweb:/ipfs/QmccCT43d47VLpa6USP3JVjuqEXhCCXdLvBJxvFqsFZcGM"
			]
		},
		"lib/zkBridge-messaging-interfaces/src/interfaces/ILightClient.sol": {
			"keccak256": "0x58f5e6ee7fd93b00666a4c07c575cb69c6526ba27e8147b88404d562a502c253",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://25b2f23b713d74da54723e8f231ef7d3c470cf56e3eb493a0277dbf82b65a999",
				"dweb:/ipfs/QmaQWQQa6UDpJ7v4BPSCyq6FyXxGXxqe54RGQrBFgmFhnZ"
			]
		},
		"lib/zkBridge-messaging-interfaces/src/interfaces/IMessaging.sol": {
			"keccak256": "0x28d52044f9d29e3f0f14b2582f9c11ea03db942a07a2e6ddfaba39844220ee29",
			"license": "MIT",
			"urls": [
				"bzz-raw://71f334d837aa5cc6ac5edd252b088993fbd1e61f01f6867f472c4a4e1b87c924",
				"dweb:/ipfs/QmfKpNw68vUeg4mQ6QY9M66CSXBPVR7BB8auTpmigUZFQy"
			]
		},
		"src/Messaging.sol": {
			"keccak256": "0x970218b41ca49b2123d8d57e7cd43ba7bf8f54ee12e0bb1d9fb21c7e6d539f08",
			"license": "MIT",
			"urls": [
				"bzz-raw://f4c650c03eb54e155568050af70bee994b728dd2c22f47402c534e20b9af72f5",
				"dweb:/ipfs/QmPuZZ5HuPgRnZmiPViPmVmzSYE8y7z15uBayb7KFnBAig"
			]
		},
		"src/MessagingAccess.sol": {
			"keccak256": "0x2385708498357841133f000a4edd13398808ae44c67d8818f0b13c90ab617631",
			"license": "MIT",
			"urls": [
				"bzz-raw://840292abc00be919293694ea01ac118974b8fa58878f9a6e10c965385f28721d",
				"dweb:/ipfs/QmYJ69cd9pHFfyS2nBuA2UPPpHDgBLG9X945X8Vdt8bDmu"
			]
		},
		"src/MessagingStorage.sol": {
			"keccak256": "0x0d545de22eae994c315c2a3dc00821c2b4c33c006ffabd9380953f17b594b193",
			"license": "MIT",
			"urls": [
				"bzz-raw://00188523972a8e28db2e3ec05fb72fcd836825d9a30001ac1a052166ac1ab062",
				"dweb:/ipfs/QmQjq4B2u4R9v7VpGPS5f58grAB4cVRKifmXouW31E6bTp"
			]
		},
		"src/Relayer.sol": {
			"keccak256": "0x5343182cec361447a63e9e8a8ca026ee67c712cd65b95b7d7d8ac678dc57cfa5",
			"license": "MIT",
			"urls": [
				"bzz-raw://042dd12d9c0c2efbdff06f48d87e2aa4cb2c66b636262ca94f8077cce725d2b6",
				"dweb:/ipfs/Qmekc62zQf3ywS7faK8BmjSm5a5QgoWHU7q9Mys2ByBYhQ"
			]
		},
		"src/ScrollMessaging.sol": {
			"keccak256": "0x89624b918ba10b89e3eb7b70f0b2421ff709269548c5b589dc21e60e036aed53",
			"license": "MIT",
			"urls": [
				"bzz-raw://eeb4784a0dfcdf59ad4a998f0fa66464827ce7cd20700476c38eb7e516f2bdd8",
				"dweb:/ipfs/QmdymbxaeHaj6mcBBj8wXk2n23i4TQUYRYAyqaUCc2QbJ9"
			]
		},
		"src/Sender.sol": {
			"keccak256": "0x1b52a3c9306ee2189853da66a709ea1787a6cae0f7de0f06d81ab26707e8b075",
			"license": "MIT",
			"urls": [
				"bzz-raw://5db198c90485a5cc4a862683579ff62db4515e2b0c2246f62ffdc875e66acadb",
				"dweb:/ipfs/QmbWTm8MuAdyurJEYN4281UckyfrX2tmzYXZHuqdksLVJk"
			]
		},
		"src/interfaces/IL1MessageQueue.sol": {
			"keccak256": "0x2a76f082be37c5dc168f4c2227ec74ebb3f0fad162fa6efe079662ed08cb8e98",
			"license": "MIT",
			"urls": [
				"bzz-raw://ddb445ca195c6bbc3e9ec1353c3b2e0bb11ea8093c01dc36c59c9a6f3657debd",
				"dweb:/ipfs/QmU5aBCvSfE82DiiRtEumXSbCocrVpZE1zmSrL7rhCoTHW"
			]
		},
		"src/interfaces/IScrollInterface.sol": {
			"keccak256": "0x350473fa7d1c46faa6f317e0120143416f9ab6243a5622aa5ef90838b6b90b45",
			"license": "MIT",
			"urls": [
				"bzz-raw://57e7d8a6e509f51775e207dff5d5b654fbf9c6b6716239b2969289c7e7087270",
				"dweb:/ipfs/QmaRcgiFr41u4Bg1VNNrYT3Z1KGpkvwudz5FLheixFeSbo"
			]
		},
		"src/interfaces/IScrollMessenger.sol": {
			"keccak256": "0xd50f655baaf779158e44d17e5c36fab0deaff04a62bd8c602b2d8724c824b5c0",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef8954d7d44331eb67d693b107099b0189844f51a8198430ea77bcea61f01ddb",
				"dweb:/ipfs/QmYjbYietoyLe9Pn1if5ZaZammSPDQhHDsMSb1rM9UrscV"
			]
		},
		"src/libraries/MessageEncoding.sol": {
			"keccak256": "0xe1e4bea10ecbc3574774b59c8aabbc0ae868a7a4d27b77d1dea879aad6f2e88f",
			"license": "MIT",
			"urls": [
				"bzz-raw://e8e1457601d9e71f9bbf818b811ae883374b4219d5049462e95428265e01f3cd",
				"dweb:/ipfs/QmRrNQZxEDFgJjmdL3G5hEuXByoomeo3MGrEDnEsj2QuBZ"
			]
		},
		"src/libraries/StateProofHelper.sol": {
			"keccak256": "0xe537724c8eb6dee1cc4b97390670cc38f8895cd35c107a3c3e29a06e7d6cf445",
			"license": "MIT",
			"urls": [
				"bzz-raw://3daab0e21a0ca39e1359cd59b9fd227b5c11b026316dc04d8d0d79cb681416f7",
				"dweb:/ipfs/QmYJFXoLzNiHVivHw12tKKPpPEDxGqi8Wi94tTVCutVhpY"
			]
		},
		"src/libraries/Typecast.sol": {
			"keccak256": "0x3d94eaa60f2d48c5f21e443c23f1c140b2a2ace09c0e1350810dd2b09faf7c1a",
			"license": "MIT OR Apache-2.0",
			"urls": [
				"bzz-raw://adeaa9e8df8cfed643c6b25c1726da69658358eca52c0f5fc2972a2abc92e65d",
				"dweb:/ipfs/QmT3UKsZUzzRFg1H6yXfhGn4jEaVkKHJx2PuneebcqKgAr"
			]
		}
	},
	"version": 1
}