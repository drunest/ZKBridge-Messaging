{
	"compiler": {
		"version": "0.8.16+commit.07a7930e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_sendingEnabled",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "CannotSendToSameChain",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SendingDisabled",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "Freeze",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "FreezeAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "sourceChainId",
						"type": "uint32"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "nonce",
						"type": "uint64"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "msgHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "status",
						"type": "bool"
					}
				],
				"name": "PassMsg",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Received",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "nonce",
						"type": "uint64"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "msgHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "SendMsg",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "nonce",
						"type": "uint64"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "msgHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "SendZkSyncMsgL1ToL2",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "enabled",
						"type": "bool"
					}
				],
				"name": "SendingEnabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "SourceChainAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "Unfreeze",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "UnfreezeAll",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MIN_LIGHT_CLIENT_DELAY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "VERSION",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"name": "broadcasters",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "isDebug",
						"type": "bool"
					}
				],
				"name": "changeDebugMode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "freeze",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "freezeAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"name": "frozen",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isDebugMode",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"name": "lightClients",
				"outputs": [
					{
						"internalType": "contract ILightClientGetter",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "messageStatus",
				"outputs": [
					{
						"internalType": "enum MessageStatus",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"name": "messages",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "msgRelayer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nonce",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "polygonL1Messager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "polygonL2Messager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rollupAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scrollL1Messager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scrollL2GasLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scrollL2Messager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "targetChainId",
						"type": "uint32"
					},
					{
						"internalType": "address",
						"name": "targetAddr",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "send",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sendingEnabled",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32[]",
						"name": "chainIds",
						"type": "uint32[]"
					},
					{
						"internalType": "address[]",
						"name": "broadcaster",
						"type": "address[]"
					}
				],
				"name": "setBroadcaster",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32[]",
						"name": "chainIds",
						"type": "uint32[]"
					},
					{
						"internalType": "address[]",
						"name": "lightclient",
						"type": "address[]"
					}
				],
				"name": "setLightClient",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_polygonL1Messager",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_polugonL2Messager",
						"type": "address"
					}
				],
				"name": "setPolygon",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_relayer",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_isTrue",
						"type": "bool"
					}
				],
				"name": "setRelayer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_scrollL1Messager",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_scrollL2Messager",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_scrollL2GasLimit",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_rollupAddress",
						"type": "address"
					}
				],
				"name": "setScroll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "enabled",
						"type": "bool"
					}
				],
				"name": "setSendingEnabled",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_zkSyncAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_l2Value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_gasLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_byteLimit",
						"type": "uint256"
					},
					{
						"internalType": "bytes[]",
						"name": "_factoryDeps",
						"type": "bytes[]"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "setZKSync",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "sourceChainIds",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sourceChainIdsLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "storageRootCache",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "unfreeze",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unfreezeAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "slot",
						"type": "uint64"
					},
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					},
					{
						"internalType": "bytes[]",
						"name": "accountProof",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes[]",
						"name": "storageProof",
						"type": "bytes[]"
					}
				],
				"name": "vMsg",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[32]",
						"name": "smtProof",
						"type": "bytes32[32]"
					},
					{
						"internalType": "uint32",
						"name": "index",
						"type": "uint32"
					},
					{
						"internalType": "bytes32",
						"name": "exitRoot",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					}
				],
				"name": "vMsgPolygon",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					}
				],
				"name": "vMsgScrollL1ToL2",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "batchIndex",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "proof",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					}
				],
				"name": "vMsgScrollL2ToL1",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					}
				],
				"name": "vMsgZkSyncL1ToL2",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "someSender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "l1BatchNumber",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "proofId",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "trxIndex",
						"type": "uint16"
					},
					{
						"internalType": "bytes",
						"name": "messageBytes",
						"type": "bytes"
					},
					{
						"internalType": "bytes32[]",
						"name": "proof",
						"type": "bytes32[]"
					}
				],
				"name": "vMsgZkSyncL2ToL1",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "zkSyncFactoryDeps",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncL2GasLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncL2GasPerPubdataByteLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncL2Value",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncRefundRecipient",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "zkSyncToL2Value",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "Succinct Labs",
			"kind": "dev",
			"methods": {
				"freeze(uint32)": {
					"details": "This is a safety mechanism to prevent the contract from being used after a security      vulnerability is detected."
				},
				"freezeAll()": {
					"details": "This is a safety mechanism to prevent the contract from being used after a security      vulnerability is detected."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setLightClient(uint32[],address[])": {
					"details": "This is controlled by the timelock as it is a potentially dangerous method      since both the light client and broadcaster address are critical in verifying      that only valid sent messages are executed."
				},
				"sourceChainIdsLength()": {
					"returns": {
						"_0": "The length of the sourceChainIds array."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unfreeze(uint32)": {
					"details": "This is a safety mechanism to continue usage of the contract after a security      vulnerability is patched."
				},
				"unfreezeAll()": {
					"details": "This is a safety mechanism to continue usage of the contract after a security      vulnerability is patched."
				}
			},
			"title": "Bridge Router",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Freeze(uint32)": {
					"notice": "Emitted when freeze is called."
				},
				"FreezeAll()": {
					"notice": "Emitted when freezeAll is called."
				},
				"SendingEnabled(bool)": {
					"notice": "Emitted when the sendingEnabled flag is changed."
				},
				"SourceChainAdded(uint32)": {
					"notice": "Emitted when a new source chain is added."
				},
				"Unfreeze(uint32)": {
					"notice": "Emitted when unfreeze is called."
				},
				"UnfreezeAll()": {
					"notice": "Emitted when unfreezeAll is called."
				}
			},
			"kind": "user",
			"methods": {
				"MIN_LIGHT_CLIENT_DELAY()": {
					"notice": "The minimum delay for using any information from the light client."
				},
				"VERSION()": {
					"notice": "Returns current contract version."
				},
				"broadcasters(uint32)": {
					"notice": "Mapping between source chainId and the address of the Bridge broadcaster on that chain."
				},
				"freeze(uint32)": {
					"notice": "Freezes messages from the specified chain."
				},
				"freezeAll()": {
					"notice": "Freezes messages from all chains."
				},
				"frozen(uint32)": {
					"notice": "Mapping between a source chainId and whether it's frozen."
				},
				"lightClients(uint32)": {
					"notice": "Mapping between source chainId and the corresponding light client."
				},
				"messageStatus(bytes32)": {
					"notice": "Mapping between a message root and its status."
				},
				"messages(uint64)": {
					"notice": "Mapping between a nonce and a message root."
				},
				"nonce()": {
					"notice": "Keeps track of the next nonce to be used."
				},
				"sendingEnabled()": {
					"notice": "Whether sending is enabled or not."
				},
				"setLightClient(uint32[],address[])": {
					"notice": "Sets the light client contract and broadcaster for a given chainId."
				},
				"setSendingEnabled(bool)": {
					"notice": "Allows the owner to control whether sending is enabled or not."
				},
				"sourceChainIds(uint256)": {
					"notice": "All sourceChainIds."
				},
				"sourceChainIdsLength()": {
					"notice": "Gets the length of the sourceChainIds array."
				},
				"storageRootCache(bytes32)": {
					"notice": "Storage root cache."
				},
				"unfreeze(uint32)": {
					"notice": "Unfreezes messages from the specified chain."
				},
				"unfreezeAll()": {
					"notice": "Unfreezes messages from all chains."
				},
				"version()": {
					"notice": "Returns current contract version."
				}
			},
			"notice": "Send and receive arbitrary messages from other chains.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/Messaging.sol": "Messaging"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 9999
		},
		"remappings": [
			":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
			":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
			":ds-test/=lib/forge-std/lib/ds-test/src/",
			":forge-std/=lib/forge-std/src/",
			":optimism-bedrock-contracts/=lib/optimism-bedrock-contracts/",
			":v2-testnet-contracts/=lib/v2-testnet-contracts/",
			":zkBridge-lightClient/=lib/zkBridge-lightClient/",
			":zkBridge-messaging-interfaces/=lib/zkBridge-messaging-interfaces/"
		],
		"viaIR": true
	},
	"sources": {
		"lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010",
				"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"lib/optimism-bedrock-contracts/Bytes.sol": {
			"keccak256": "0x7aca6593fadf438ee9cd090d8fdc8f94a5202a2eb7f764c9a86f207712d87a48",
			"license": "MIT",
			"urls": [
				"bzz-raw://aac32157885c5a08bd0bc7dcd5511f66db12bb20d0c263dd7be9f58b91538fc1",
				"dweb:/ipfs/Qmb1iG11Z53yt9wNbGsuTvoydJXFosDDpWwRSADKyqiCjw"
			]
		},
		"lib/optimism-bedrock-contracts/rlp/RLPReader.sol": {
			"keccak256": "0x7fec14965f928924f6299a51c4220d2daf1ed46185d1e5706b6bd3d2e0340a56",
			"license": "MIT",
			"urls": [
				"bzz-raw://ae3b6784b641557bc6757c8dea8c8c459343d408f9a18f962763dba341e64e95",
				"dweb:/ipfs/QmbqSmwkzrYbtc4ov9fEfReA4RYUgMBd12dPCm2KGXdRQW"
			]
		},
		"lib/optimism-bedrock-contracts/rlp/RLPWriter.sol": {
			"keccak256": "0x5aa9d21c5b41c9786f23153f819d561ae809a1d55c7b0d423dfeafdfbacedc78",
			"license": "MIT",
			"urls": [
				"bzz-raw://921c44e6a0982b9a4011900fda1bda2c06b7a85894967de98b407a83fe9f90c0",
				"dweb:/ipfs/QmSsHLKDUQ82kpKdqB6VntVGKuPDb4W9VdotsubuqWBzio"
			]
		},
		"lib/optimism-bedrock-contracts/trie/MerkleTrie.sol": {
			"keccak256": "0xd27fc945d6dd2821636d840f3766f817823c8e9fbfdb87c2da7c73e4292d2f7f",
			"license": "MIT",
			"urls": [
				"bzz-raw://497cec37d09ebcdc8d1cccac608a4a0b9b9d83eac6cc7c9e8b73c4c6644e2209",
				"dweb:/ipfs/QmUYMsCcgU6epspvKV9Y6anHyyMb4hd1xVzUZheBY9mfG7"
			]
		},
		"lib/zkBridge-messaging-interfaces/src/interfaces/ILightClient.sol": {
			"keccak256": "0x58f5e6ee7fd93b00666a4c07c575cb69c6526ba27e8147b88404d562a502c253",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://25b2f23b713d74da54723e8f231ef7d3c470cf56e3eb493a0277dbf82b65a999",
				"dweb:/ipfs/QmaQWQQa6UDpJ7v4BPSCyq6FyXxGXxqe54RGQrBFgmFhnZ"
			]
		},
		"lib/zkBridge-messaging-interfaces/src/interfaces/IMessaging.sol": {
			"keccak256": "0x28d52044f9d29e3f0f14b2582f9c11ea03db942a07a2e6ddfaba39844220ee29",
			"license": "MIT",
			"urls": [
				"bzz-raw://71f334d837aa5cc6ac5edd252b088993fbd1e61f01f6867f472c4a4e1b87c924",
				"dweb:/ipfs/QmfKpNw68vUeg4mQ6QY9M66CSXBPVR7BB8auTpmigUZFQy"
			]
		},
		"src/Messaging.sol": {
			"keccak256": "0x5340bf6203dfdf8de917d2b94084b86746ab13c2ab3e2926689c0c70243deb01",
			"license": "MIT",
			"urls": [
				"bzz-raw://f24a444c7a330bf7e3b96076b0f7f0e911fd219dd90210f835e4a6fb0033d6ec",
				"dweb:/ipfs/QmcogS7otr2KDpPQcSFYHgD7ADFG9o2VtRBHzNvP6WptRN"
			]
		},
		"src/MessagingAccess.sol": {
			"keccak256": "0xf0aba02dd457c9e9a18e877004c4e8b9b21a0d8fb0919170cdbab84d110afc6d",
			"license": "MIT",
			"urls": [
				"bzz-raw://fee5d944a6de74ed869f9ed2bafe29e1e1ce4d07141b5cfa423907aa09830910",
				"dweb:/ipfs/QmaEwdrtpVCZDajXPJvL2pywMYoXNE7BBRJW5mQqKHMSLn"
			]
		},
		"src/MessagingStorage.sol": {
			"keccak256": "0xc2703269c01c01834d1fdfed6e9a27281aa47b5ab617519a1b4eceb24e341633",
			"license": "MIT",
			"urls": [
				"bzz-raw://221eb2be104b087821bdb65bec8a8ef351e73c9128894fe4d2764d0dd2b0959f",
				"dweb:/ipfs/QmSsfToMAsY45DgKRtVMc2r9jFoJccXzYRNDCuj8pJH9Qk"
			]
		},
		"src/PolygonMessaging.sol": {
			"keccak256": "0xa519655d5bd5ac2d64388e1aa6c7954fd5ffec09a5202f4e39c1125769f6237e",
			"license": "MIT",
			"urls": [
				"bzz-raw://4e2a7eaf9cc9d262195a806c1dd9727dfa82a47bc1cd423cd54318986eb9437c",
				"dweb:/ipfs/QmdSMRb2ZPSsJ42ESGMFpRHcfq5g2gGfJajTtArWF4EqT4"
			]
		},
		"src/Relayer.sol": {
			"keccak256": "0x4b7138674ad2d20d0be6ba822d1667cf82f194077d7fd715805fac5e4911fa99",
			"license": "MIT",
			"urls": [
				"bzz-raw://18885d12e63ce04fd11f8365d0f40ca49ed930a40010afac663a0570c33073a9",
				"dweb:/ipfs/QmNkTJgjmJKedTBNmaMJ2mgTgocNxM76ZFzrN8m5HG8HmE"
			]
		},
		"src/ScrollMessaging.sol": {
			"keccak256": "0x2993d43c4d9fa466b8fea76ee1c10fa557310b6026a2c884334cd14e3382adb6",
			"license": "MIT",
			"urls": [
				"bzz-raw://bb53b35721014e66716dd6fff3773022e14b0d928fc30b1e9ed3b3ae3715e481",
				"dweb:/ipfs/QmaHrSFXGwcbmRFgHNEtVCDeH1ZwXxUHibXs6x25XogfG2"
			]
		},
		"src/Sender.sol": {
			"keccak256": "0x622af6a2466e861574f1e9d1b254b04a0a81c5ab7f89f314468b6f0264b7e13a",
			"license": "MIT",
			"urls": [
				"bzz-raw://994aeb86f1d11d217e1175e6f6c23290898bd95e77b90739a4d69ca75dc62e04",
				"dweb:/ipfs/QmTq53My84NEcDehRJx7Eo8shRTs428LcFggeW2fQnkFbt"
			]
		},
		"src/ZkSyncMessaging.sol": {
			"keccak256": "0x527fc616abfe36747fc92381a015e99f41f17bcddc15d7b0a0c1d6babc9f2174",
			"license": "MIT",
			"urls": [
				"bzz-raw://68fe8227356e52d74b2e11bdb3691bafbda222d4bbb901620ec3fd54e04dad96",
				"dweb:/ipfs/QmXtWH12r6rmjyLUBrns2d3JDCH7LxoLgrXybD54wJX3Jt"
			]
		},
		"src/interfaces/IPolygon.sol": {
			"keccak256": "0xf7eee860562cf5f311682c2581eccfdb1274a31c847a5ea21ba81e767c5aeca1",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://21eb26bffee19e5a550d8fa723482a87bb9055b52713e617c350c270f6dae7c6",
				"dweb:/ipfs/QmeAxajZd9mqFGGrMUCZM9rPDimpfwBtnG9nMUNFV7jpcx"
			]
		},
		"src/interfaces/IScrollChain.sol": {
			"keccak256": "0x50ab307322288888a5e75fae64046c8268d8bf132602622d462efc1ddf254520",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://7b859649baa8fc305e815220a94f715a86a480549517141c2c7011c314aab022",
				"dweb:/ipfs/QmSgR9SZV5sdj6rdnmc9fYtYr1QLEJbHCyjfKL8KNCoJCy"
			]
		},
		"src/interfaces/IScrollInterface.sol": {
			"keccak256": "0x350473fa7d1c46faa6f317e0120143416f9ab6243a5622aa5ef90838b6b90b45",
			"license": "MIT",
			"urls": [
				"bzz-raw://57e7d8a6e509f51775e207dff5d5b654fbf9c6b6716239b2969289c7e7087270",
				"dweb:/ipfs/QmaRcgiFr41u4Bg1VNNrYT3Z1KGpkvwudz5FLheixFeSbo"
			]
		},
		"src/interfaces/IScrollMessenger.sol": {
			"keccak256": "0xb10b5d77e6a06b7474f5d3534cced82cec53dc971615193017ffe2c26f2412d9",
			"license": "MIT",
			"urls": [
				"bzz-raw://5fb9b5573e6e9d2197fc3e17ac7713790fc4e85de3fd5306bb1c4679fd2c099b",
				"dweb:/ipfs/QmeCyvQh7wuREV8qcY58nmSRQeY82pY3zTZUDSE2vy5Fxi"
			]
		},
		"src/interfaces/IZkSync.sol": {
			"keccak256": "0x98ea5b3e3b73fc7a569c8ab17a85d650be541d2834592af32d3ca8a16a990a87",
			"license": "MIT",
			"urls": [
				"bzz-raw://56414da2bbda38ef1023438469f03ec18085ea46d41e859dd9dc04e2694eff53",
				"dweb:/ipfs/QmUU3WXN87mtsyAo4D9k5tYXkFiWVkyUDHVqMrTDRdvzyH"
			]
		},
		"src/libraries/MessageEncoding.sol": {
			"keccak256": "0xe1e4bea10ecbc3574774b59c8aabbc0ae868a7a4d27b77d1dea879aad6f2e88f",
			"license": "MIT",
			"urls": [
				"bzz-raw://e8e1457601d9e71f9bbf818b811ae883374b4219d5049462e95428265e01f3cd",
				"dweb:/ipfs/QmRrNQZxEDFgJjmdL3G5hEuXByoomeo3MGrEDnEsj2QuBZ"
			]
		},
		"src/libraries/StateProofHelper.sol": {
			"keccak256": "0x28503df396f015ccea099dbac83395e1106c11bc7ee0762c19c6f407ea4ed6c6",
			"license": "MIT",
			"urls": [
				"bzz-raw://5e851ff3e8d2e1330ef631158da27dc7fa0b198f5d97342323dce626a7557042",
				"dweb:/ipfs/QmS8V2Xx5KGCg3mZeeLcSA2Ubfaym123cJ6W9KTKJDnX9d"
			]
		},
		"src/libraries/Typecast.sol": {
			"keccak256": "0x3d94eaa60f2d48c5f21e443c23f1c140b2a2ace09c0e1350810dd2b09faf7c1a",
			"license": "MIT OR Apache-2.0",
			"urls": [
				"bzz-raw://adeaa9e8df8cfed643c6b25c1726da69658358eca52c0f5fc2972a2abc92e65d",
				"dweb:/ipfs/QmT3UKsZUzzRFg1H6yXfhGn4jEaVkKHJx2PuneebcqKgAr"
			]
		},
		"src/libraries/WithdrawTrieVerifier.sol": {
			"keccak256": "0x124ed9f176ca7a7faaa74b853c174f28edc6fba071658a58be7127b17ab0aa4f",
			"license": "MIT",
			"urls": [
				"bzz-raw://26de33cf9b4f95355049dfd230c98067e57e89a3ec840e6c206021678d8b8f8d",
				"dweb:/ipfs/QmfBCEw6wEFB4esmnd6LMaonnFXdq942NEeKK2FsR4K9vC"
			]
		}
	},
	"version": 1
}